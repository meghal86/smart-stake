import React, { useState, useEffect, useMemo } from 'react';

// Type definitions for whale data
interface WhaleData {
  id: string;
  address: string;
  fullAddress: string;
  label: string;
  balance: number;
  balanceUsd: number;
  riskScore: number;
  recentActivity: number;
  chain: string;
  reasons: string[];
  supporting_events: string[];
  provider: string;
  method: string;
  confidence: number;
}

interface MarketMetrics {
  volume24h: number;
  activeWhales: number;
  riskAlerts: number;
  topSignals: Array<{
    signal_type: string;
    confidence: number;
    value: string;
  }>;
}

// Helper functions
const formatNumber = (num: number): string => {
  return new Intl.NumberFormat('en-US', {
    minimumFractionDigits: 2,
    maximumFractionDigits: 2
  }).toLocaleString();
};

const formatCurrency = (num: number): string => {
  if (num >= 1e9) return `$${(num / 1e9).toFixed(1)}B`;
  if (num >= 1e6) return `$${(num / 1e6).toFixed(1)}M`;
  if (num >= 1e3) return `$${(num / 1e3).toFixed(1)}K`;
  return `$${num.toFixed(2)}`;
};

const getRiskColor = (score: number): string => {
  if (score >= 70) return '#dc2626'; // red-600
  if (score >= 40) return '#d97706'; // amber-600
  return '#16a34a'; // green-600
};

const getRiskBadge = (score: number): { color: string; bgColor: string; label: string } => {
  if (score >= 70) return { color: '#dc2626', bgColor: '#fef2f2', label: 'High Risk' };
  if (score >= 40) return { color: '#d97706', bgColor: '#fffbeb', label: 'Medium Risk' };
  return { color: '#16a34a', bgColor: '#f0fdf4', label: 'Low Risk' };
};

const getExplorerUrl = (address: string, chain: string = 'ethereum'): string => {
  const explorers = {
    ethereum: 'https://etherscan.io/address/',
    polygon: 'https://polygonscan.com/address/',
    bsc: 'https://bscscan.com/address/'
  };
  return (explorers[chain as keyof typeof explorers] || explorers.ethereum) + address;
};

const getTxExplorerUrl = (txHash: string, chain: string = 'ethereum'): string => {
  const explorers = {
    ethereum: 'https://etherscan.io/tx/',
    polygon: 'https://polygonscan.com/tx/',
    bsc: 'https://bscscan.com/tx/'
  };
  return (explorers[chain as keyof typeof explorers] || explorers.ethereum) + txHash;
};

// Inline styles
const styles = {
  container: {
    maxWidth: '1200px',\n    margin: '0 auto',\n    padding: '24px',\n    fontFamily: 'system-ui, -apple-system, sans-serif'\n  },\n  card: {\n    backgroundColor: '#ffffff',\n    border: '1px solid #e5e7eb',\n    borderRadius: '8px',\n    padding: '16px',\n    marginBottom: '16px',\n    boxShadow: '0 1px 3px rgba(0, 0, 0, 0.1)',\n    transition: 'box-shadow 0.2s'\n  },\n  header: {\n    display: 'flex',\n    alignItems: 'center',\n    gap: '12px',\n    marginBottom: '24px'\n  },\n  title: {\n    fontSize: '24px',\n    fontWeight: 'bold',\n    margin: '0 0 4px 0',\n    color: '#111827'\n  },\n  subtitle: {\n    fontSize: '14px',\n    color: '#6b7280',\n    margin: 0\n  },\n  metricsGrid: {\n    display: 'grid',\n    gridTemplateColumns: 'repeat(auto-fit, minmax(200px, 1fr))',\n    gap: '16px',\n    marginBottom: '24px'\n  },\n  metricCard: {\n    backgroundColor: '#ffffff',\n    border: '1px solid #e5e7eb',\n    borderRadius: '8px',\n    padding: '16px',\n    display: 'flex',\n    alignItems: 'center',\n    gap: '12px'\n  },\n  metricIcon: {\n    width: '20px',\n    height: '20px'\n  },\n  metricLabel: {\n    fontSize: '12px',\n    color: '#6b7280',\n    margin: '0 0 4px 0'\n  },\n  metricValue: {\n    fontSize: '20px',\n    fontWeight: 'bold',\n    margin: 0,\n    color: '#111827'\n  },\n  signalsStrip: {\n    backgroundColor: '#ffffff',\n    border: '1px solid #e5e7eb',\n    borderRadius: '8px',\n    padding: '12px',\n    marginBottom: '24px'\n  },\n  signalsHeader: {\n    fontSize: '14px',\n    fontWeight: '500',\n    marginBottom: '8px',\n    color: '#111827'\n  },\n  signalsBadges: {\n    display: 'flex',\n    gap: '8px',\n    flexWrap: 'wrap'\n  },\n  badge: {\n    display: 'inline-flex',\n    alignItems: 'center',\n    gap: '4px',\n    padding: '4px 8px',\n    fontSize: '12px',\n    border: '1px solid #e5e7eb',\n    borderRadius: '4px',\n    backgroundColor: '#f9fafb',\n    whiteSpace: 'nowrap'\n  },\n  whaleCard: {\n    backgroundColor: '#ffffff',\n    border: '1px solid #e5e7eb',\n    borderRadius: '8px',\n    padding: '16px',\n    marginBottom: '16px',\n    transition: 'box-shadow 0.2s'\n  },\n  whaleHeader: {\n    display: 'flex',\n    justifyContent: 'space-between',\n    alignItems: 'flex-start',\n    marginBottom: '16px',\n    flexWrap: 'wrap',\n    gap: '12px'\n  },\n  whaleInfo: {\n    display: 'flex',\n    alignItems: 'center',\n    gap: '12px'\n  },\n  whaleIcon: {\n    width: '20px',\n    height: '20px',\n    color: '#3b82f6'\n  },\n  whaleLabel: {\n    fontSize: '16px',\n    fontWeight: '600',\n    margin: '0 0 4px 0',\n    color: '#111827'\n  },\n  whaleAddress: {\n    fontSize: '12px',\n    color: '#3b82f6',\n    textDecoration: 'none',\n    display: 'inline-flex',\n    alignItems: 'center',\n    gap: '4px'\n  },\n  whaleBadges: {\n    display: 'flex',\n    gap: '8px',\n    flexWrap: 'wrap'\n  },\n  metricsRow: {\n    display: 'grid',\n    gridTemplateColumns: 'repeat(auto-fit, minmax(120px, 1fr))',\n    gap: '16px',\n    marginBottom: '16px'\n  },\n  metric: {\n    textAlign: 'left'\n  },\n  metricLabelSmall: {\n    fontSize: '12px',\n    color: '#6b7280',\n    margin: '0 0 4px 0'\n  },\n  metricValueSmall: {\n    fontSize: '14px',\n    fontWeight: '500',\n    margin: 0,\n    color: '#111827'\n  },\n  riskFactorsButton: {\n    width: '100%',\n    textAlign: 'left',\n    padding: '12px',\n    backgroundColor: '#fef3c7',\n    border: '1px solid #f59e0b',\n    borderRadius: '6px',\n    cursor: 'pointer',\n    transition: 'background-color 0.2s',\n    marginBottom: '8px'\n  },\n  riskFactorsHeader: {\n    display: 'flex',\n    justifyContent: 'space-between',\n    alignItems: 'center'\n  },\n  riskFactorsTitle: {\n    fontSize: '14px',\n    fontWeight: '500',\n    color: '#92400e',\n    margin: 0\n  },\n  riskFactorsContent: {\n    padding: '12px',\n    backgroundColor: '#fef3c7',\n    border: '1px solid #f59e0b',\n    borderRadius: '6px',\n    marginBottom: '16px'\n  },\n  riskFactorsList: {\n    listStyle: 'none',\n    padding: 0,\n    margin: 0\n  },\n  riskFactorItem: {\n    display: 'flex',\n    alignItems: 'flex-start',\n    gap: '8px',\n    marginBottom: '4px',\n    fontSize: '14px',\n    color: '#92400e'\n  },\n  supportingEvents: {\n    padding: '12px',\n    backgroundColor: '#dbeafe',\n    border: '1px solid #3b82f6',\n    borderRadius: '6px',\n    marginBottom: '16px'\n  },\n  supportingEventsTitle: {\n    fontSize: '14px',\n    fontWeight: '500',\n    color: '#1e40af',\n    margin: '0 0 8px 0'\n  },\n  eventLinks: {\n    display: 'flex',\n    gap: '8px',\n    flexWrap: 'wrap'\n  },\n  eventLink: {\n    display: 'inline-flex',\n    alignItems: 'center',\n    gap: '4px',\n    padding: '4px 8px',\n    backgroundColor: '#bfdbfe',\n    color: '#1e40af',\n    textDecoration: 'none',\n    borderRadius: '4px',\n    fontSize: '12px',\n    transition: 'background-color 0.2s'\n  },\n  summary: {\n    backgroundColor: '#ffffff',\n    border: '1px solid #e5e7eb',\n    borderRadius: '8px',\n    padding: '16px'\n  },\n  summaryHeader: {\n    display: 'flex',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    marginBottom: '16px'\n  },\n  summaryTitle: {\n    fontSize: '16px',\n    fontWeight: '600',\n    margin: 0,\n    color: '#111827'\n  },\n  summaryGrid: {\n    display: 'grid',\n    gridTemplateColumns: 'repeat(3, 1fr)',\n    gap: '16px'\n  },\n  summaryItem: {\n    textAlign: 'center'\n  },\n  loading: {\n    textAlign: 'center',\n    padding: '40px',\n    color: '#6b7280'\n  },\n  error: {\n    textAlign: 'center',\n    padding: '40px',\n    color: '#dc2626',\n    backgroundColor: '#fef2f2',\n    border: '1px solid #fecaca',\n    borderRadius: '8px'\n  }\n};\n\n// Sample mock data\nconst mockWhales: WhaleData[] = [\n  {\n    id: 'whale-1',\n    address: '0xBE0eB53F...404d33E8',\n    fullAddress: '0xBE0eB53F46cd790Cd13851d5EFf43D12404d33E8',\n    label: 'Whale 1',\n    balance: 1996008.37,\n    balanceUsd: 6826348626.27,\n    riskScore: 85,\n    recentActivity: 12,\n    chain: 'ethereum',\n    reasons: ['Extremely large balance: $6.8B', 'High liquidity whale: 2.0M ETH'],\n    supporting_events: ['0xa1b2c3d4e5f6789012345678901234567890abcdef1234567890abcdef123456'],\n    provider: 'whale-analytics',\n    method: 'balance_risk_analysis',\n    confidence: 0.85\n  },\n  {\n    id: 'whale-2',\n    address: '0x40B38765...8E418E489',\n    fullAddress: '0x40B38765696e3d5d8d9d834D8AaD4bB6e418E489',\n    label: 'Whale 2',\n    balance: 1177794.80,\n    balanceUsd: 4028058230.23,\n    riskScore: 75,\n    recentActivity: 8,\n    chain: 'ethereum',\n    reasons: ['Large balance: $4.0B', 'High liquidity whale: 1.2M ETH'],\n    supporting_events: ['0xb2c3d4e5f6789012345678901234567890abcdef1234567890abcdef1234567'],\n    provider: 'whale-analytics',\n    method: 'balance_risk_analysis',\n    confidence: 0.78\n  },\n  {\n    id: 'whale-3',\n    address: '0x742d35Cc...4b4df93',\n    fullAddress: '0x742d35Cc6634C0532925a3b8D4C9db96C4b4df93',\n    label: 'Whale 3',\n    balance: 0.00,\n    balanceUsd: 0,\n    riskScore: 15,\n    recentActivity: 0,\n    chain: 'ethereum',\n    reasons: ['Inactive wallet with zero balance'],\n    supporting_events: [],\n    provider: 'whale-analytics',\n    method: 'balance_risk_analysis',\n    confidence: 0.65\n  }\n];\n\nconst mockMetrics: MarketMetrics = {\n  volume24h: 2847,\n  activeWhales: 8,\n  riskAlerts: 3,\n  topSignals: [\n    { signal_type: 'risk_score', confidence: 0.85, value: '85' },\n    { signal_type: 'large_transfer', confidence: 0.78, value: '1200' },\n    { signal_type: 'balance_change', confidence: 0.72, value: '15' }\n  ]\n};\n\n// Individual whale card component\nconst WhaleCard: React.FC<{ whale: WhaleData }> = ({ whale }) => {\n  const [showRiskFactors, setShowRiskFactors] = useState(false);\n  const riskBadge = getRiskBadge(whale.riskScore);\n\n  return (\n    <div style={styles.whaleCard}>\n      {/* Header with address and badges */}\n      <div style={styles.whaleHeader}>\n        <div style={styles.whaleInfo}>\n          <svg style={styles.whaleIcon} fill=\"currentColor\" viewBox=\"0 0 20 20\">\n            <path d=\"M2 10a8 8 0 018-8v8h8a8 8 0 11-16 0z\" />\n          </svg>\n          <div>\n            <h3 style={styles.whaleLabel}>{whale.label}</h3>\n            <a\n              href={getExplorerUrl(whale.fullAddress, whale.chain)}\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n              style={styles.whaleAddress}\n              aria-label={`View wallet ${whale.fullAddress} on blockchain explorer`}\n            >\n              <code>{whale.address}</code>\n              <svg width=\"12\" height=\"12\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                <path d=\"M11 3a1 1 0 100 2h2.586l-6.293 6.293a1 1 0 101.414 1.414L15 6.414V9a1 1 0 102 0V4a1 1 0 00-1-1h-5z\" />\n              </svg>\n            </a>\n          </div>\n        </div>\n        \n        <div style={styles.whaleBadges}>\n          <span style={{...styles.badge, color: '#6b7280'}}>\n            <svg width=\"12\" height=\"12\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n              <path d=\"M3 4a1 1 0 011-1h12a1 1 0 011 1v2a1 1 0 01-1 1H4a1 1 0 01-1-1V4zM3 10a1 1 0 011-1h6a1 1 0 011 1v6a1 1 0 01-1 1H4a1 1 0 01-1-1v-6zM14 9a1 1 0 00-1 1v6a1 1 0 001 1h2a1 1 0 001-1v-6a1 1 0 00-1-1h-2z\" />\n            </svg>\n            {whale.provider}\n          </span>\n          <span style={{...styles.badge, color: '#6b7280'}}>\n            <svg width=\"12\" height=\"12\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n              <path fillRule=\"evenodd\" d=\"M2.166 4.999A11.954 11.954 0 0010 1.944 11.954 11.954 0 0017.834 5c.11.65.166 1.32.166 2.001 0 5.225-3.34 9.67-8 11.317C5.34 16.67 2 12.225 2 7c0-.682.057-1.35.166-2.001zm11.541 3.708a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z\" clipRule=\"evenodd\" />\n            </svg>\n            {Math.round(whale.confidence * 100)}%\n          </span>\n          <span style={{...styles.badge, color: riskBadge.color, backgroundColor: riskBadge.bgColor}}>\n            {riskBadge.label}\n          </span>\n        </div>\n      </div>\n\n      {/* Metrics */}\n      <div style={styles.metricsRow}>\n        <div style={styles.metric}>\n          <p style={styles.metricLabelSmall}>Balance</p>\n          <p style={styles.metricValueSmall}>{formatNumber(whale.balance)} ETH</p>\n        </div>\n        <div style={styles.metric}>\n          <p style={styles.metricLabelSmall}>USD Value</p>\n          <p style={styles.metricValueSmall}>{formatCurrency(whale.balanceUsd)}</p>\n        </div>\n        <div style={styles.metric}>\n          <p style={styles.metricLabelSmall}>Activity</p>\n          <p style={styles.metricValueSmall}>{whale.recentActivity}</p>\n        </div>\n        <div style={styles.metric}>\n          <p style={styles.metricLabelSmall}>Risk Score</p>\n          <p style={{...styles.metricValueSmall, color: getRiskColor(whale.riskScore)}}>\n            {whale.riskScore}/100\n          </p>\n        </div>\n      </div>\n\n      {/* Collapsible Risk Factors */}\n      {whale.reasons.length > 0 && whale.reasons[0] !== 'No risk analysis available' && (\n        <div>\n          <button\n            onClick={() => setShowRiskFactors(!showRiskFactors)}\n            onKeyDown={(e) => {\n              if (e.key === 'Enter' || e.key === ' ') {\n                e.preventDefault();\n                setShowRiskFactors(!showRiskFactors);\n              }\n            }}\n            style={{\n              ...styles.riskFactorsButton,\n              backgroundColor: showRiskFactors ? '#fde68a' : '#fef3c7'\n            }}\n            aria-expanded={showRiskFactors}\n            aria-controls={`risk-factors-${whale.id}`}\n          >\n            <div style={styles.riskFactorsHeader}>\n              <h4 style={styles.riskFactorsTitle}>\n                ⚠️ Risk Factors ({whale.reasons.length})\n              </h4>\n              <span style={{\n                color: '#f59e0b',\n                transform: showRiskFactors ? 'rotate(180deg)' : 'rotate(0deg)',\n                transition: 'transform 0.2s'\n              }}>\n                ▼\n              </span>\n            </div>\n          </button>\n          {showRiskFactors && (\n            <div \n              id={`risk-factors-${whale.id}`}\n              style={styles.riskFactorsContent}\n              role=\"region\"\n              aria-labelledby={`risk-factors-header-${whale.id}`}\n            >\n              <ul style={styles.riskFactorsList}>\n                {whale.reasons.map((reason, idx) => (\n                  <li key={idx} style={styles.riskFactorItem}>\n                    <span>•</span>\n                    <span>{reason}</span>\n                  </li>\n                ))}\n              </ul>\n            </div>\n          )}\n        </div>\n      )}\n\n      {/* Supporting Events */}\n      {whale.supporting_events.length > 0 && (\n        <div style={styles.supportingEvents}>\n          <h4 style={styles.supportingEventsTitle}>\n            🔗 Supporting Evidence\n          </h4>\n          <div style={styles.eventLinks}>\n            {whale.supporting_events.slice(0, 4).map((txHash, idx) => (\n              <a\n                key={idx}\n                href={getTxExplorerUrl(txHash, whale.chain)}\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                style={styles.eventLink}\n                aria-label={`View transaction ${txHash} on blockchain explorer`}\n              >\n                <code>{txHash.slice(0, 6)}...{txHash.slice(-4)}</code>\n                <svg width=\"12\" height=\"12\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                  <path d=\"M11 3a1 1 0 100 2h2.586l-6.293 6.293a1 1 0 101.414 1.414L15 6.414V9a1 1 0 102 0V4a1 1 0 00-1-1h-5z\" />\n                </svg>\n              </a>\n            ))}\n            {whale.supporting_events.length > 4 && (\n              <span style={{...styles.badge, backgroundColor: '#f3f4f6'}}>\n                +{whale.supporting_events.length - 4} more\n              </span>\n            )}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\n// Main dashboard component\nconst WhaleAnalyticsDashboard: React.FC<{\n  whales?: WhaleData[];\n  metrics?: MarketMetrics;\n  loading?: boolean;\n  error?: string;\n}> = ({ \n  whales = mockWhales, \n  metrics = mockMetrics, \n  loading = false, \n  error = null \n}) => {\n  // Memoized sorted whales for performance\n  const sortedWhales = useMemo(() => \n    [...whales].sort((a, b) => b.riskScore - a.riskScore),\n    [whales]\n  );\n\n  // Risk level counts\n  const riskCounts = useMemo(() => ({\n    high: sortedWhales.filter(w => w.riskScore >= 70).length,\n    medium: sortedWhales.filter(w => w.riskScore >= 40 && w.riskScore < 70).length,\n    low: sortedWhales.filter(w => w.riskScore < 40).length\n  }), [sortedWhales]);\n\n  if (loading) {\n    return (\n      <div style={styles.container}>\n        <div style={styles.loading}>\n          <p>Loading whale analytics...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div style={styles.container}>\n        <div style={styles.error}>\n          <h3>Error Loading Data</h3>\n          <p>{error}</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div style={styles.container}>\n      {/* Header */}\n      <div style={styles.header}>\n        <svg style={{width: '32px', height: '32px', color: '#3b82f6'}} fill=\"currentColor\" viewBox=\"0 0 20 20\">\n          <path d=\"M2 10a8 8 0 018-8v8h8a8 8 0 11-16 0z\" />\n        </svg>\n        <div>\n          <h1 style={styles.title}>Whale Analytics</h1>\n          <p style={styles.subtitle}>AI-powered whale risk assessment</p>\n        </div>\n      </div>\n\n      {/* Market Metrics */}\n      <div style={styles.metricsGrid}>\n        <div style={styles.metricCard}>\n          <svg style={{...styles.metricIcon, color: '#16a34a'}} fill=\"currentColor\" viewBox=\"0 0 20 20\">\n            <path fillRule=\"evenodd\" d=\"M12 7a1 1 0 110-2h5a1 1 0 011 1v5a1 1 0 11-2 0V8.414l-4.293 4.293a1 1 0 01-1.414 0L8 10.414l-4.293 4.293a1 1 0 01-1.414-1.414l5-5a1 1 0 011.414 0L11 10.586 14.586 7H12z\" clipRule=\"evenodd\" />\n          </svg>\n          <div>\n            <p style={styles.metricLabel}>24h Volume</p>\n            <p style={styles.metricValue}>${metrics.volume24h.toLocaleString()}M</p>\n          </div>\n        </div>\n        \n        <div style={styles.metricCard}>\n          <svg style={{...styles.metricIcon, color: '#3b82f6'}} fill=\"currentColor\" viewBox=\"0 0 20 20\">\n            <path d=\"M9 6a3 3 0 11-6 0 3 3 0 016 0zM17 6a3 3 0 11-6 0 3 3 0 016 0zM12.93 17c.046-.327.07-.66.07-1a6.97 6.97 0 00-1.5-4.33A5 5 0 0119 16v1h-6.07zM6 11a5 5 0 015 5v1H1v-1a5 5 0 015-5z\" />\n          </svg>\n          <div>\n            <p style={styles.metricLabel}>Active Whales</p>\n            <p style={styles.metricValue}>{metrics.activeWhales}</p>\n          </div>\n        </div>\n        \n        <div style={styles.metricCard}>\n          <svg style={{...styles.metricIcon, color: '#f59e0b'}} fill=\"currentColor\" viewBox=\"0 0 20 20\">\n            <path fillRule=\"evenodd\" d=\"M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z\" clipRule=\"evenodd\" />\n          </svg>\n          <div>\n            <p style={styles.metricLabel}>Risk Alerts</p>\n            <p style={styles.metricValue}>{metrics.riskAlerts}</p>\n          </div>\n        </div>\n      </div>\n\n      {/* Market Signals Strip */}\n      {metrics.topSignals.length > 0 && (\n        <div style={styles.signalsStrip}>\n          <div style={styles.signalsHeader}>\n            ⚠️ Current Market Signals\n          </div>\n          <div style={styles.signalsBadges}>\n            {metrics.topSignals.map((signal, idx) => (\n              <span key={idx} style={styles.badge}>\n                <span style={{textTransform: 'capitalize'}}>\n                  {signal.signal_type.replace('_', ' ')}\n                </span>\n                <span style={{opacity: 0.7, fontSize: '11px'}}>\n                  ({Math.round(signal.confidence * 100)}%)\n                </span>\n              </span>\n            ))}\n          </div>\n        </div>\n      )}\n\n      {/* Whale List */}\n      <div role=\"main\" aria-label=\"Whale analytics results\">\n        {sortedWhales.length > 0 ? (\n          <>\n            <div style={{marginBottom: '16px', fontSize: '14px', color: '#6b7280'}}>\n              Showing {sortedWhales.length} whales sorted by risk score\n            </div>\n            {sortedWhales.map(whale => (\n              <WhaleCard key={whale.id} whale={whale} />\n            ))}\n          </>\n        ) : (\n          <div style={styles.card}>\n            <div style={{textAlign: 'center', padding: '40px'}}>\n              <svg style={{width: '48px', height: '48px', color: '#9ca3af', margin: '0 auto 16px'}} fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                <path d=\"M2 10a8 8 0 018-8v8h8a8 8 0 11-16 0z\" />\n              </svg>\n              <h3 style={{margin: '0 0 8px 0', color: '#111827'}}>No Whales Found</h3>\n              <p style={{margin: 0, color: '#6b7280'}}>No whale data available at this time.</p>\n            </div>\n          </div>\n        )}\n      </div>\n\n      {/* Risk Summary Footer */}\n      {sortedWhales.length > 0 && (\n        <div style={styles.summary}>\n          <div style={styles.summaryHeader}>\n            <h3 style={styles.summaryTitle}>Risk Summary</h3>\n            <span style={{...styles.badge, color: '#6b7280'}}>\n              <svg width=\"12\" height=\"12\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                <path d=\"M3 4a1 1 0 011-1h12a1 1 0 011 1v2a1 1 0 01-1 1H4a1 1 0 01-1-1V4zM3 10a1 1 0 011-1h6a1 1 0 011 1v6a1 1 0 01-1 1H4a1 1 0 01-1-1v-6zM14 9a1 1 0 00-1 1v6a1 1 0 001 1h2a1 1 0 001-1v-6a1 1 0 00-1-1h-2z\" />\n              </svg>\n              Live Data\n            </span>\n          </div>\n          <div style={styles.summaryGrid}>\n            <div style={styles.summaryItem}>\n              <p style={styles.metricLabelSmall}>High Risk</p>\n              <p style={{...styles.metricValue, color: '#dc2626', fontSize: '18px'}}>\n                {riskCounts.high}\n              </p>\n            </div>\n            <div style={styles.summaryItem}>\n              <p style={styles.metricLabelSmall}>Medium Risk</p>\n              <p style={{...styles.metricValue, color: '#d97706', fontSize: '18px'}}>\n                {riskCounts.medium}\n              </p>\n            </div>\n            <div style={styles.summaryItem}>\n              <p style={styles.metricLabelSmall}>Low Risk</p>\n              <p style={{...styles.metricValue, color: '#16a34a', fontSize: '18px'}}>\n                {riskCounts.low}\n              </p>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default WhaleAnalyticsDashboard;\n\n// Usage example with Supabase integration:\n/*\nimport { useEffect, useState } from 'react';\nimport { createClient } from '@supabase/supabase-js';\nimport WhaleAnalyticsDashboard from './WhaleAnalyticsDashboard';\n\nconst supabase = createClient('your-url', 'your-key');\n\nfunction App() {\n  const [whales, setWhales] = useState([]);\n  const [metrics, setMetrics] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    async function fetchData() {\n      try {\n        // Fetch whale balances\n        const { data: balances, error: balanceError } = await supabase\n          .from('whale_balances')\n          .select('*')\n          .order('balance_usd', { ascending: false });\n        \n        if (balanceError) throw balanceError;\n        \n        // Fetch whale signals\n        const { data: signals } = await supabase\n          .from('whale_signals')\n          .select('*');\n        \n        // Transform and combine data\n        const transformedWhales = balances.map((whale, index) => {\n          const signal = signals?.find(s => s.address === whale.address);\n          return {\n            id: `whale-${index}`,\n            address: whale.address.slice(0, 10) + '...' + whale.address.slice(-6),\n            fullAddress: whale.address,\n            label: `Whale ${index + 1}`,\n            balance: parseFloat(whale.balance),\n            balanceUsd: whale.balance_usd,\n            riskScore: signal?.risk_score || 50,\n            recentActivity: 0, // Calculate from transfers\n            chain: whale.chain,\n            reasons: signal?.reasons || [],\n            supporting_events: signal?.supporting_events || [],\n            provider: whale.provider,\n            method: whale.method,\n            confidence: signal?.confidence || 0.5\n          };\n        });\n        \n        setWhales(transformedWhales);\n        setMetrics({\n          volume24h: 2847,\n          activeWhales: balances.length,\n          riskAlerts: signals?.filter(s => s.risk_score >= 70).length || 0,\n          topSignals: signals?.slice(0, 5) || []\n        });\n      } catch (err) {\n        setError(err.message);\n      } finally {\n        setLoading(false);\n      }\n    }\n    \n    fetchData();\n  }, []);\n\n  return (\n    <WhaleAnalyticsDashboard \n      whales={whales}\n      metrics={metrics}\n      loading={loading}\n      error={error}\n    />\n  );\n}\n*/\n\n// UX Improvement Suggestions:\n// 1. Add real-time updates with WebSocket connections\n// 2. Implement filtering and sorting controls\n// 3. Add whale comparison features\n// 4. Include historical risk score charts\n// 5. Add export functionality for whale data\n// 6. Implement whale watchlist features\n// 7. Add mobile-responsive breakpoints\n// 8. Include dark mode support\n// 9. Add keyboard shortcuts for power users\n// 10. Implement infinite scrolling for large datasets