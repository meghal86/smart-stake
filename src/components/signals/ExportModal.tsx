/**
 * ExportModal - World-class export experience following AlphaWhale best practices
 * CEO-grade exports with proper labeling and user-friendly options
 */

import { useState } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Card, CardContent } from '@/components/ui/card';
import { 
  Download, FileText, Code, Copy, FileImage, 
  CheckCircle, AlertCircle, Sparkles 
} from 'lucide-react';
import type { Signal } from '@/types/signal';

interface ExportModalProps {
  signals: Signal[];
  isOpen: boolean;
  onClose: () => void;
  dataSource?: 'LIVE_DATA' | 'DEMO_MODE';
  title?: string;
}

export function ExportModal({ 
  signals, 
  isOpen, 
  onClose, 
  dataSource = 'LIVE_DATA',
  title = 'Whale Signals Export'
}: ExportModalProps) {
  const [exportStatus, setExportStatus] = useState<string | null>(null);
  const [isExporting, setIsExporting] = useState(false);

  const exportSummary = `Data exported from AlphaWhale. All stats calculated from live blockchain data. Exported at ${new Date().toLocaleString()}.`;
  const isLiveData = dataSource === 'LIVE_DATA';

  const generateCSV = () => {
    const headers = ['Date', 'Time', 'Asset', 'Direction', 'Amount (USD)', 'Risk Level', 'Event Type', 'Source'];
    const rows = signals.map(signal => [
      new Date(signal.timestamp).toLocaleDateString(),
      new Date(signal.timestamp).toLocaleTimeString(),
      signal.asset,
      signal.direction === 'inflow' ? 'Accumulation' : 'Distribution',
      `$${(signal.amountUsd / 1000000).toFixed(2)}M`,
      signal.risk.charAt(0).toUpperCase() + signal.risk.slice(1),
      signal.reason || 'Whale Movement',
      signal.source || 'whale_alert'
    ]);

    const csvContent = [
      `# ${exportSummary}`,
      `# Data Status: ${isLiveData ? 'LIVE BLOCKCHAIN DATA' : 'DEMO DATA'}`,
      `# Total Signals: ${signals.length}`,
      `# Export Type: Summary CSV`,
      '',
      headers.join(','),
      ...rows.map(row => row.join(','))
    ].join('\n');

    return csvContent;
  };

  const generateJSON = () => {
    const exportData = {
      metadata: {
        exportedAt: new Date().toISOString(),
        dataSource: isLiveData ? 'LIVE_BLOCKCHAIN_DATA' : 'DEMO_DATA',
        totalSignals: signals.length,
        exportType: 'FULL_ANALYSIS_JSON',
        summary: exportSummary,
        note: 'For Analysts/Developers - Full technical data structure'
      },
      signals: signals.map(signal => ({
        id: signal.id,
        asset: signal.asset,
        direction: signal.direction,
        amountUsd: signal.amountUsd,
        timestamp: signal.timestamp,
        risk: signal.risk,
        ownerType: signal.ownerType,
        source: signal.source,
        reason: signal.reason,
        impactScore: signal.impactScore,
        isLive: signal.isLive
      })),
      analytics: {
        totalVolume: signals.reduce((sum, s) => sum + s.amountUsd, 0),
        riskDistribution: {
          high: signals.filter(s => s.risk === 'high').length,
          medium: signals.filter(s => s.risk === 'medium').length,
          low: signals.filter(s => s.risk === 'low').length
        },
        assetBreakdown: signals.reduce((acc, s) => {
          acc[s.asset] = (acc[s.asset] || 0) + 1;
          return acc;
        }, {} as Record<string, number>)
      }
    };

    return JSON.stringify(exportData, null, 2);
  };

  const generatePlainSummary = () => {
    const totalVolume = signals.reduce((sum, s) => sum + s.amountUsd, 0);
    const highRiskCount = signals.filter(s => s.risk === 'high').length;
    const topAssets = Object.entries(
      signals.reduce((acc, s) => {
        acc[s.asset] = (acc[s.asset] || 0) + 1;
        return acc;
      }, {} as Record<string, number>)
    ).sort(([,a], [,b]) => b - a).slice(0, 3);

    return `${exportSummary}

WHALE ACTIVITY SUMMARY
======================

ðŸ“Š Total Signals: ${signals.length}
ðŸ’° Total Volume: $${(totalVolume / 1000000).toFixed(1)}M
ðŸš¨ High Risk Events: ${highRiskCount}
ðŸ“ˆ Data Status: ${isLiveData ? 'LIVE BLOCKCHAIN DATA' : 'DEMO DATA'}

TOP ASSETS:
${topAssets.map(([asset, count]) => `â€¢ ${asset}: ${count} signals`).join('\n')}

RECENT ACTIVITY:
${signals.slice(0, 5).map(s => 
  `â€¢ ${s.asset} ${s.direction === 'inflow' ? 'ðŸ“ˆ' : 'ðŸ“‰'} $${(s.amountUsd / 1000000).toFixed(1)}M (${s.risk} risk)`
).join('\n')}

Generated by AlphaWhale Intelligence Platform
${new Date().toLocaleString()}`;
  };

  const handleExport = async (type: 'csv' | 'json' | 'summary' | 'pdf') => {
    setIsExporting(true);
    setExportStatus(null);

    try {
      let content: string;
      let filename: string;
      let mimeType: string;

      switch (type) {
        case 'csv':
          content = generateCSV();
          filename = `AlphaWhale-Signals-${new Date().toISOString().split('T')[0]}.csv`;
          mimeType = 'text/csv';
          break;
        case 'json':
          content = generateJSON();
          filename = `AlphaWhale-Analysis-${new Date().toISOString().split('T')[0]}.json`;
          mimeType = 'application/json';
          break;
        case 'summary':
          content = generatePlainSummary();
          await navigator.clipboard.writeText(content);
          setExportStatus('Summary copied to clipboard!');
          setIsExporting(false);
          return;
        case 'pdf':
          // For now, generate a text version that could be converted to PDF
          content = generatePlainSummary();
          filename = `AlphaWhale-Report-${new Date().toISOString().split('T')[0]}.txt`;
          mimeType = 'text/plain';
          break;
        default:
          throw new Error('Invalid export type');
      }

      const blob = new Blob([content], { type: mimeType });
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = filename;
      a.click();
      URL.revokeObjectURL(url);

      setExportStatus(`${type.toUpperCase()} exported successfully!`);
    } catch (error) {
      setExportStatus('Export failed. Please try again.');
    } finally {
      setIsExporting(false);
    }
  };

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="max-w-2xl">
        <DialogHeader>
          <DialogTitle className="flex items-center gap-2">
            <Download className="h-5 w-5 text-[var(--brand-teal,#14B8A6)]" />
            Export {title}
          </DialogTitle>
        </DialogHeader>

        <div className="space-y-6 py-4">
          {/* Data Status Banner */}
          <div className={`p-3 rounded-lg border-l-4 ${
            isLiveData 
              ? 'bg-emerald-50 dark:bg-emerald-900/20 border-emerald-500' 
              : 'bg-amber-50 dark:bg-amber-900/20 border-amber-500'
          }`}>
            <div className="flex items-center gap-2">
              {isLiveData ? (
                <CheckCircle className="h-4 w-4 text-emerald-600" />
              ) : (
                <AlertCircle className="h-4 w-4 text-amber-600" />
              )}
              <span className="text-sm font-medium">
                {isLiveData ? 'LIVE BLOCKCHAIN DATA' : 'DEMO DATA'}
              </span>
              <Badge variant="outline" className="text-xs">
                {signals.length} signals
              </Badge>
            </div>
            <p className="text-xs text-slate-600 dark:text-slate-400 mt-1">
              {exportSummary}
            </p>
          </div>

          {/* Export Options */}
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            {/* CSV Export - For Everyone */}
            <motion.div whileHover={{ scale: 1.02 }} whileTap={{ scale: 0.98 }}>
              <Card className="cursor-pointer hover:shadow-md transition-shadow">
                <CardContent className="p-4">
                  <div className="flex items-start gap-3">
                    <FileText className="h-8 w-8 text-emerald-600 mt-1" />
                    <div className="flex-1">
                      <h3 className="font-semibold text-slate-900 dark:text-slate-100">
                        Download CSV
                      </h3>
                      <p className="text-sm text-slate-600 dark:text-slate-400 mb-3">
                        Simple, readable format. Perfect for Excel or Google Sheets.
                      </p>
                      <Button 
                        onClick={() => handleExport('csv')}
                        disabled={isExporting}
                        className="w-full bg-emerald-600 hover:bg-emerald-700 text-white"
                      >
                        <FileText className="h-4 w-4 mr-2" />
                        Export CSV
                      </Button>
                    </div>
                  </div>
                </CardContent>
              </Card>
            </motion.div>

            {/* JSON Export - For Developers */}
            <motion.div whileHover={{ scale: 1.02 }} whileTap={{ scale: 0.98 }}>
              <Card className="cursor-pointer hover:shadow-md transition-shadow">
                <CardContent className="p-4">
                  <div className="flex items-start gap-3">
                    <Code className="h-8 w-8 text-blue-600 mt-1" />
                    <div className="flex-1">
                      <div className="flex items-center gap-2 mb-1">
                        <h3 className="font-semibold text-slate-900 dark:text-slate-100">
                          Download JSON
                        </h3>
                        <Badge className="bg-blue-100 text-blue-700 dark:bg-blue-900/30 text-xs">
                          For Analysts/Developers
                        </Badge>
                      </div>
                      <p className="text-sm text-slate-600 dark:text-slate-400 mb-3">
                        Full technical data structure for custom analysis.
                      </p>
                      <Button 
                        onClick={() => handleExport('json')}
                        disabled={isExporting}
                        variant="outline"
                        className="w-full border-blue-200 hover:bg-blue-50"
                      >
                        <Code className="h-4 w-4 mr-2" />
                        Export JSON
                      </Button>
                    </div>
                  </div>
                </CardContent>
              </Card>
            </motion.div>

            {/* Plain Summary - For Sharing */}
            <motion.div whileHover={{ scale: 1.02 }} whileTap={{ scale: 0.98 }}>
              <Card className="cursor-pointer hover:shadow-md transition-shadow">
                <CardContent className="p-4">
                  <div className="flex items-start gap-3">
                    <Copy className="h-8 w-8 text-purple-600 mt-1" />
                    <div className="flex-1">
                      <h3 className="font-semibold text-slate-900 dark:text-slate-100">
                        Copy Summary
                      </h3>
                      <p className="text-sm text-slate-600 dark:text-slate-400 mb-3">
                        Plain text summary for emails and presentations.
                      </p>
                      <Button 
                        onClick={() => handleExport('summary')}
                        disabled={isExporting}
                        variant="outline"
                        className="w-full border-purple-200 hover:bg-purple-50"
                      >
                        <Copy className="h-4 w-4 mr-2" />
                        Copy to Clipboard
                      </Button>
                    </div>
                  </div>
                </CardContent>
              </Card>
            </motion.div>

            {/* PDF Report - For Executives */}
            <motion.div whileHover={{ scale: 1.02 }} whileTap={{ scale: 0.98 }}>
              <Card className="cursor-pointer hover:shadow-md transition-shadow">
                <CardContent className="p-4">
                  <div className="flex items-start gap-3">
                    <FileImage className="h-8 w-8 text-amber-600 mt-1" />
                    <div className="flex-1">
                      <div className="flex items-center gap-2 mb-1">
                        <h3 className="font-semibold text-slate-900 dark:text-slate-100">
                          Save Report
                        </h3>
                        <Badge className="bg-amber-100 text-amber-700 dark:bg-amber-900/30 text-xs">
                          CEO-Ready
                        </Badge>
                      </div>
                      <p className="text-sm text-slate-600 dark:text-slate-400 mb-3">
                        Branded report ready for board meetings and partners.
                      </p>
                      <Button 
                        onClick={() => handleExport('pdf')}
                        disabled={isExporting}
                        variant="outline"
                        className="w-full border-amber-200 hover:bg-amber-50"
                      >
                        <FileImage className="h-4 w-4 mr-2" />
                        Save Report
                      </Button>
                    </div>
                  </div>
                </CardContent>
              </Card>
            </motion.div>
          </div>

          {/* Status Message */}
          <AnimatePresence>
            {exportStatus && (
              <motion.div
                initial={{ opacity: 0, y: 10 }}
                animate={{ opacity: 1, y: 0 }}
                exit={{ opacity: 0, y: -10 }}
                className="flex items-center gap-2 p-3 bg-emerald-50 dark:bg-emerald-900/20 rounded-lg border border-emerald-200 dark:border-emerald-800"
              >
                <CheckCircle className="h-4 w-4 text-emerald-600" />
                <span className="text-sm text-emerald-700 dark:text-emerald-300">
                  {exportStatus}
                </span>
              </motion.div>
            )}
          </AnimatePresence>

          {/* Footer */}
          <div className="flex items-center justify-between pt-4 border-t border-slate-200 dark:border-slate-700">
            <div className="flex items-center gap-2 text-xs text-slate-500 dark:text-slate-400">
              <Sparkles className="h-3 w-3" />
              <span>Powered by AlphaWhale Intelligence</span>
            </div>
            <Button variant="ghost" onClick={onClose}>
              Close
            </Button>
          </div>
        </div>
      </DialogContent>
    </Dialog>
  );
}